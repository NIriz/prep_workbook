#1
What do you expect to happen when the greeting variable is referenced 
in the last line of the code below?

if false
  greeting = “hello world”
end

greeting

Answer: Probably raises an error since most objects in Ruby return true.

SOLUTION:
greeting is nil here, and no "undefined method or local variable" exception 
is thrown. Typically, when you reference an uninitialized variable, 
Ruby will raise an exception, stating that it’s undefined. However, 
when you initialize a local variable within an if block, even if that if 
block doesn’t get executed, the local variable is initialized to nil.



#2
What is the result of the last line in the code below?

greetings = { a: 'hi' }
informal_greeting = greetings[:a]
informal_greeting << ' there'

puts informal_greeting  #  => "hi there"
puts greetings


Answer: { a: 'hi' } wrong! Hard for me to tell at this point which
method calls modify the original object vs. creating/returning a new 
object. ie concatenation vs. the method above. 

SOLUTION:
The output is {:a=>"hi there"}. The reason is because informal_greeting is a 
reference to the original object. The line informal_greeting << ' there' was 
using the String#<< method, which modifies the object that called it. This 
means that the original object was changed, thereby impacting the value 
in greetings. If instead of modifying the original object, we wanted only 
modify informal_greeting but not greetings, there are a couple of options:

we could initialize informal_greeting with a reference to a new object 
containing the same value by informal_greeting = greetings[:a].clone.
we can use string concatenation, informal_greeting = informal_greeting 
+ ' there', which returns a new String object instead of modifying the 
original object.



#3
What will be printed by each of these code groups?

A)  I think this will be two, three, one (that is, being
    permanently modified by the method bc the method
    re-assigns values?) WRONG: it still is one, two, three

  def mess_with_vars(one, two, three)
    one = two
    two = three
    three = one
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"


B) I think this will be one, two, three (NOT
   permanenetly modified by the method)  

  def mess_with_vars(one, two, three)
    one = "two"
    two = "three"
    three = "one"
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"


C) I think this will be two, three, one

  def mess_with_vars(one, two, three)
    one.gsub!("one","two")
    two.gsub!("two","three")
    three.gsub!("three","one")
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}




#4
Each UUID consists of 32 hexadecimal characters, and 
is typically broken into 5 sections like this 8-4-4-4-12 
and represented as a string.

It looks like this: "f65c57f6-a6aa-17a8-faa1-a67f2dc9fa91"

Write a method that returns one UUID when called with no parameters.

def my_uuid
  id = []
  num = (0..9).to_a
  num.map!{|n| n.to_s}
  range = num + (('a'..'f').to_a) + num 
  until id.length == 32
    id << range.sample
  end
  
  until id.length == 36
    case id.length
    when 32
      id.insert(8, '-')
    when 33
      id.insert(13, '-')
    when 34
      id.insert(18, '-')
    when 35
      id.insert(23, '-')
    else 
      id.insert(35, '-')
    end
  end

  p id.join

end

THEIR SOLUTION:
def generate_UUID
    characters = [] 
    (0..9).each { |digit| characters << digit.to_s }
    ('a'..'f').each { |digit| characters << digit }

    uuid = ""
    sections = [8, 4, 4, 4, 12]
    sections.each_with_index do |section, index|
      section.times { uuid += characters.sample }
      uuid += '-' unless index >= sections.size - 1
    end

    uuid
end



#5
"It's a good start, but you missed a few things. You're not 
returning a false condition, and not handling the case that 
there are more or fewer than 4 components to the IP address 
(e.g. "4.5.5" or "1.2.3.4.5" should be invalid)."

def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    break if !is_a_number?(word)
  end
  return true
end


My version:
def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  if dot_separated_words.length != 4
    puts "This is not an IP address, it doesn't have exactly 4 elements."
  else
    while dot_separated_words.size > 0 do
      word = dot_separated_words.pop
      if is_a_number?(word)
        return true
      else
        return false
      end
    end
  end
end

THEIR SOLUTION:
def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  return false unless dot_separated_words.size == 4

  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    return false unless is_a_number?(word)
  end

  true
end

Note: Ben's original `return true` on the last line of the 
method can be shortened to just `true`. This is because Ruby 
returns the result of the last line of any method by default.



