# Quiz 1

#1
numbers = [1, 2, 2, 3]
numbers.uniq

puts numbers

# should return:
1
2
2
3

#2
Describe the difference between ! and ? in Ruby. And explain what would happen in the following 
scenarios: 
1. what is != and where should you use it?
    means "is not"; use in comparisons
2. put ! before something, like !user_name
    turn something into their boolean opposite (ex. !nil == true)
3. put ! after something, like words.uniq!
    makes a 'hard' change on the argument being passed
4. put ? before something
    not sure...
5. put ? after something
    asks if true
6. put !! before something, like !!user_name
    used to turn any object into their boolean equivalent (ie true or false)

! when added to a method it usually permanently changes the argument being passed.  It can also indicate
  a "not equal" to.
? usually used in conjunction to a method that will return true/false
? : is the ternary operator for if...else 


#3
Replace the word "important" with "urgent" in this string:

advice = "Few things in life are as important as house training your pet dinosaur."
advice.gsub!('important', 'urgent')

#4
The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. 
Lets see how they differ:

numbers = [1, 2, 3, 4, 5]

numbers.delete_at(1) 
# would return 2

numbers.delete(1)
# woudl return 1

#5
Programmatically determine if 42 lies between 10 and 100

(10..100).include?(42)
They used (10..100).cover?(42)

Examples to illustrate difference between cover/include
('a'..'z').cover?('yellow')
# => true

('a'..'z').include?('yellow')
# => false

('yellaa'..'yellzz').include?('yellow')
 => true


#6
famous_words = "and seven years ago..."
show two different ways to put the expected "Four score and " in front of it.

"Four score " + famous_words
famous_words.prepend("Four score and ")


#7
42 - but not sure how this eval thing works...


#8
arr = ["Fred", "Wilma", ["Barney", "Betty"], ["BamBam", "Pebbles"]]
arr.flatten!


#9
flintstones = { "Fred" => 0, "Wilma" => 1, "Barney" => 2, "Betty" => 3, "BamBam" => 4, "Pebbles" => 5 }
flintstones.select! { |k,v| k == 'Barney'}
flintstones.to_a

THEY USED: flintstones.assoc("Barney")

#10
f = ["Fred", "Barney", "Wilma", "Betty", "Pebbles", "BamBam"] Turn to hash:
hash = f.map.with_index { |x, i| p x, i } 
hash.to_h

THEIR SOLUTION:
flintstones_hash = {}
flintstones.each_with_index do |name, index|
  flintstones_hash[name] = index
end

















